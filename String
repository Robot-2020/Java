一：存放位置：
String类是我们平常项目中使用频率非常高的一种对象类型，jvm为了提升性能和减少内存开销，避免字符的重复创建，其维护了一块特殊的内存空间，即字符串池，当需要使用字符串时，先去字符串池中查看该字符串是否已经存在，如果存在，则可以直接使用，如果不存在，初始化，并将该字符串放入字符创常量池中。
在 JDK 1.7 之后(包括1.7)，字符串常量池已经从方法区移到了堆中。
两种创建方法的区别：
1. String str1= “abc”；
 在编译期，JVM会去常量池来查找是否存在“abc”。
如果不存在，就在常量池中开辟一个空间来存储“abc”；
如果存在，就不用新开辟空间。
然后在栈内存中开辟一个名字为str1的空间，来存储“abc”在常量池中的地址值。

2. String str2 = new String("abc") ;
在编译阶段JVM先去常量池中查找是否存在“abc”。
如果存在：
（1）首先会在堆中创建一个 s2 变量的对象引用，将堆中对象引用的地址返回给str2这个引用；
（2）然后将堆中这个对象引用指向字符串常量池中的已经存在的常量；
如果不存在：
  则直接在堆中创建一个字符串对象然后返回给变量。

intern() 池化
那什么时候会放到字符串常量池呢，就是在使用 intern() 方法之后。
（1）如果当前字符串内容存在于字符串常量池，那直接返回此字符串在常量池的引用；
（2）如果之前不在字符串常量池中，那么在常量池创建一个引用并且指向堆中已存在的字符串，然后返回常量池中的地址。
JDK 1.7 之后，字符串常量池不一定就是存字符串对象的，还有可能存储的是一个指向堆中地址的引用（情况（2））。

public class Test {
	public static void main(String[] args) {
		String s1 = "古时的风筝";
		String s2 = "古时的风筝";
		String a = "古时的";
		String s3 = new String(a + "风筝");
		String s4 = new String(a + "风筝");
		System.out.println(s1 == s2); // 【1】 true
		System.out.println(s2 == s3); // 【2】 false
		System.out.println(s3 == s4); // 【3】 false
		s3.intern();			      //   只是intern()，并没有返回给一个引用。
		System.out.println(s2 == s3); // 【4】 false
		s3 = s3.intern();
		System.out.println(s2 == s3); // 【5】 true
		s4 = s4.intern();
		System.out.println(s3 == s4); // 【6】 true
	}
}
