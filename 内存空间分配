Java内存空间划分：
1、栈区（stacksegment） ：由编译器自动分配释放,存放函数的参数值，局部变量的值等，具体方法执行结束之后，系统自动释放JVM内存资源。
2、堆区（heapsegment）  ：般由程序员分配释放，存放由new创建的对象和数组，jvm不定时查看这个对象，如果没有引用指向这个对象就回收。
3、静态区（datasegment）/ 方法区：存放全局变量，静态变量和字符串常量，不释放。

本地变量（局部变量）：
在方法中声明的变量，即该变量是本地变量，每当程序调用方法时，系统都会为该方法建立一个方法栈，其所在方法中声明的变量就放在方法栈中，
当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因。

在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。
（1）当声明是基本类型的变量的时，其变量名及值（变量名及值是两个概念）是放在JAVA虚拟机栈中。【变量：栈   值：栈】
（2）当声明的是引用类型变量时，所声明的变量名（该变量实际上是在方法中存储的是内存地址值）是放在JAVA虚拟机的栈中，该变量所指向的对象是放在堆类存中的。【变量（对象引用）：栈    对象：堆】

成员变量（全局变量）：
在类中声明的变量是成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。
同样在类中声明的变量即可是基本类型的变量 也可是引用类型的变量。
（1）当声明的是基本类型的变量其变量名及其值放在堆内存中的。【变量：堆   值：堆】
（2）引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。引用变量名和对应的对象仍然存储在相应的堆中。【变量（对象引用）：堆    对象：堆】

只要是基本类型，则变量和值都放在一起，本地的放在栈中，成员的放在堆中。
只要是引用类型，则创建的对象就在堆中。而变量如果是本地变量则在栈中，如果是成员变量则在堆中。

常量池：存放字符串常量和基本类型常量final
常量池：JVM为每个已加载的类型维护一个常量池，常量池就是这个类型用到的常量的一个有序集合。包括直接常量(基本类型，String)和对其他类型、方法、字段的符号引用。
池中的数据和数组一样通过索引访问。由于常量池包含了一个类型所有的对其他类型、方法、字段的符号引用，所以常量池在Java的动态链接中起了核心作用。常量池存在于堆中。

字符串常量池在 Java 内存区域的哪个位置：
在 JDK6.0 及之前版本，字符串常量池是放在 Perm Gen 区(也就是方法区)中，此时常量池中存储的是对象。
在 JDK7.0 版本，字符串常量池被移到了堆中了。此时常量池存储的就是引用了。在 JDK8.0 中，永久代（方法区）被元空间取代了。

intern() 池化：
intern() 的定义：如果当前字符串内容存在于字符串常量池，存在的条件是使用 equas() 方法为ture，也就是内容是一样的，那直接返回此字符串在常量池的引用；
如果之前不在字符串常量池中，那么在常量池创建一个引用并且指向堆中已存在的字符串，然后返回常量池中的地址。

栈内存中存放局部变量（基本数据类型变量和对象引用)，而堆内存用于存放对象（实体）。
对于字符串而言，如果是编译期已经创建好(直接用双引号定义的)的就存储在常量池中；如果是运行期（new出来的）才能确定的就存储在堆中。
对于equals相等的字符串，在常量池中永远只有一份，在堆中可以有多份。
