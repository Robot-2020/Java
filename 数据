Java 是一种强类型语言。这就意味着必须为每一个变量声明一种类型: 在 Java 中， -共有 8 种基本类型（ primitive type ), 其中有 4 种整型、2 种浮点类型、 1 种用于表示 Unicode 编码的字符
单元的字符类型 char (请参见论述 char 类型的章节） 和 1 种用于表示真值的 boolean 类型。Notice: Java 没有任何无符号（unsigned) 形式的 int、 long、short 或 byte 类型。
1.整型：
byte：1B
short：2B
int：4B：-2^16-2^16-1(-2147483648 - 2147483647)
long：8B

长整型数值有一个后缀 L 或 1 ( 如 4000000000L。)
十六进制数值有一个前缀 Ox 或 0X (如OxCAFEL 八进制有一个前缀 0 , 例如， 010 对应八进制中的 8。很显然， 八进制表示法比较容易混淆， 所以建议最好不要使用八进制常数。
从 Java 7 开始， 加上前缀 0b 或 0B 就可以写二进制数。例如，OblOO丨就是 9。
另外，同样是从 Java 7 开始，还可以为数字字面量加下划线，如用 1_000_000(或册1丨丨丨_0100_00丨0_丨0 00_0000 )表示一百万。这些下划线只是为丫让人更易读。Java 编译器会去除这些下划线。

2.浮点类型：
float: 4B
double: 8B

float 类型的数值有一个后缀 F 或 f (例如，3.14F。) 没有后缀 F 的浮点数值（如 3.14 ) 默认为 double 类型。当然，也可以在浮点数值后面添加后缀 D 或 d (例如，3.14D)。
浮点数值不适用于无法接受舍入误差的金融计算中。 例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是人们想象的 0.9。
这种舍入误差的主要原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。这就好像十进制无法精确地表示分数 1/3—样。
如果在数值计算中不允许有任何舍入误差，就应该使用 BigDecima丨类。

3.char类型：
char 类型的字面量值要用单引号括起来。例如：W 是编码值为 65 所对应的字符常量。它与 "A" 不同，"A" 是包含一个字符 A 的字符串,有些 Unicode字符可以用一个 char 值描述。
\b 退格 \u0008 ， \" 双引号 \u0022 ，\t 制表 \u0009 ，\ 单引号 \u0027 ，\n 换行 \u000a % 反斜杠 \u005c ，\r 回车 \u000d

4.boolean类型：
boolean (布尔）类型有两个值：false 和 true, 用来判定逻辑条件 
整型值和布尔值之间不能进行相互转换！！！


变量：
变量名必须是一个以字母开头并由字母或数字构成的序列。字母包括下划线或在某种语言中表示字母的任何Unicode字符。另外， 不能使用 Java 保留字作为变量名。
在 Java 中， 不区分变量的声明与定义。

变量初始化：
本地变量（局部变量）：Java不会帮你初始化。
成员变量（new 对象）：Java会帮你初始化。（0、0L、0.0f、0.0d、‘\u0000’、false）

常量：
在 Java 中，利用关键字 final 指示常量（本地常量），关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上,常量名使用全大写。
在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为类常量。可以使用关键字 static final 设置一个类常量。
Notice：类常量的定义位于 main 方法的外部。因此，在同一个类的其他方法中也可以使用这个常量。而且，如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量。

运算符：
+ - * / % 同C

数学函数：
Math中的静态函数（不需要创建对象就可以直接访问的类函数）
Math.sqrt(x);   Math.pow(x, a);   Math,sin;   Math.cos;   Math.log;   Math.exp;   Math.PI
不必在数学方法名和常量名前添加前缀“ Math”， 只要在源文件的顶部加上下面这行代码就可以了。import static java.1ang.Math.*

类型转换：
隐式类型转换：
1.当两个数值进行二元操作时，先将两个操作数转换为同一种类型，然后再进行计算。
•如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。
•否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。
•否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。
•否则， 两个操作数都将被转换为 int 类型。
2.赋值运算时，自动转换为左侧数据类型。

强制类型转换：强制类型转换存在信息丢失的可能性。
1.通过强制类型转换(cast) 实现。
2.对浮点数进行舍入运算Math.round 方法。
调用 round 的时候，仍然需要使用强制类型转换(int) 其原因是round 方法返回的结果为 long 类型,所以只有使用显式的强制类型转换才能够将 long 类型转换成 int 类型。

字符串：
Java 字符串就是 Unicode 字符序列。Java 没有内置的字符串类型， 而是在标准 Java 类库中提供了一个预定义类，很自然地叫做 String。每个用双引号括起来的字符串都是 String类的一个实例。
jvm为了提升性能和减少内存开销，避免字符的重复创建，其维护了一块特殊的内存空间，即字符串常量池，用来存储字符串常量。
因为String 变量指向的是一个常量，因此不能修改常量的值，只能让他指向另一个常量。所以String是不可变字符串。对象的赋值是引用赋值。
1. String str1= “abc”; 在编译期，JVM会去常量池来查找是否存在“abc”，如果不存在，就在常量池中开辟一个空间来存储“abc”；如果存在，就不用新开辟空间。
然后在栈内存中开辟一个名字为str1的空间，来存储“abc”在常量池中的地址值。
2. String str2 = new String("abc"); 在编译阶段JVM先去常量池中查找是否存在“abc”，如果过不存在，则在常量池中开辟一个空间存储“abc”。
在运行时期，通过String类的构造器在堆内存中new了一个空间，然后将String池中的“abc”复制一份存放到该堆空间中，在栈中开辟名字为str2的空间，存放堆中new出来的这个String对象的地址值。

